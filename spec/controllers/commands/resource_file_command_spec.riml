riml_include 'dsl.riml'
riml_include 'log_helpers.riml'
riml_include 'portkey_inc.riml'
riml_include 'app_driver.riml'
riml_include 'filename_matcher.riml'

class ResourceFileCommandSpec
  defm describe
    return 'ResourceFileCommandSpec'
  end

  defm before_each
    self.driver = new AppDriver()
  end

  defm after_each
    :unlet self.driver
  end

  defm it_can_complete_Emodel
    d = self.driver
    d.start()

    " new buffer inside 'basic' project with portkey.json
    b = new Buffer('spec/projects/basic/foo.rb')
    b.find_root()

    " open and enter buffer
    d.do_buffer_open(b)
    d.do_buffer_enter(b)

    " get completion list
    result = d.do_complete('Emodel', '', 'Emodel', 0)

    " must reflect alternates in portkey.json
    expect(result).to_have_file('foo')
  end

  defm it_can_complete_Emodel_with_prefix_f
    d = self.driver
    d.start()

    " new buffer inside 'basic' project with portkey.json
    b = new Buffer('spec/projects/basic/foo.rb')
    b.find_root()

    " open and enter buffer
    d.do_buffer_open(b)
    d.do_buffer_enter(b)

    " get completion list
    result = d.do_complete('Emodel', '', "'<,'>Emod ", 0)

    " must reflect alternates in portkey.json
    expect(result).to_have_file('foo')
  end

  defm it_can_switch_to_controller_corresponding_to_model
    d = self.driver
    d.start()

    b = new Buffer('spec/projects/rails/app/models/post.rb')
    b.find_root()

    o = d.lookup('file_opener')
    o.set_exec_mode(false)

    d.do_buffer_open(b)
    d.do_buffer_enter(b)

    opts = {}
    opts.match = 'Econtroller'
    d.do_autocmd('Econtroller', opts)

    expect(o.exec_cmd).to_match('app/controllers/posts_controller.rb$')
  end

  defm it_can_switch_to_model_with_filename
    d = self.driver
    d.start()

    b = new Buffer('spec/projects/rails/app/models/post.rb')
    b.find_root()

    o = d.lookup('file_opener')
    o.set_exec_mode(false)

    d.do_buffer_open(b)
    d.do_buffer_enter(b)

    opts = {}
    opts.match = 'Emodel'
    d.do_autocmd('Emodel', 'comment', opts)

    expect(o.exec_cmd).to_match('app/models/comment.rb$')
  end

  defm it_can_switch_to_model_with_filename_with_extension
    d = self.driver
    d.start()

    b = new Buffer('spec/projects/rails/app/models/post.rb')
    b.find_root()

    o = d.lookup('file_opener')
    o.set_exec_mode(false)

    d.do_buffer_open(b)
    d.do_buffer_enter(b)

    opts = {}
    opts.match = 'Emodel'
    d.do_autocmd('Emodel', 'comment.rb', opts)

    expect(o.exec_cmd).to_match('app/models/comment.rb$')
  end
end
