riml_include 'dsl.riml'
riml_include 'log_helpers.riml'
riml_include 'object_cache.riml'
riml_include 'buffer.riml'
riml_include 'projection_inc.riml'
riml_include 'template_context.riml'
riml_include 'filename_matcher.riml'
riml_include 'data_frame.riml'
riml_include 'file_finder.riml'
riml_include 'finder.riml'

class FileFinderSpec
  defm describe
    return 'FileFinderSpec'
  end

  defm it_can_find_files_from_pattern_list
    buffer = new Buffer('spec/projects/basic/foo.rb')
    buffer.find_root()

    projection = new Projection('foo')
    finder = new FileFinder()
    pattern_list = []
    add(pattern_list, new ProjectionPattern('*.rb', {}))
    add(pattern_list, new ProjectionPattern('*_spec.rb', {}))

    data = new GetFileDataFrame(buffer)
    data.set_pattern_list(pattern_list)
    data.set_source('foo')

    context = new TemplateContext(data)
    collector = new FinderCollector()
    finder.find(context, collector)
    files = collector.get_results()

    expect(files).to_have_file('foo.rb')
    expect(files).to_have_file('foo_spec.rb')
  end

  defm it_can_substitute_into_pattern
    f = new FileFinder()
    filename = 'lorem'
    pattern = new ProjectionPattern('app/models/*.rb', {})

    expect(f.into_pattern(filename, pattern)).to_equal('app/models/lorem.rb')
  end

  defm it_can_substitute_into_double_star_pattern
    f = new FileFinder()
    pattern = new ProjectionPattern('app/models/**.rb', {})

    expect(f.into_pattern('post', pattern)).to_equal('app/models/post.rb')
    expect(f.into_pattern('admin/post', pattern)).to_equal('app/models/admin/post.rb')
  end

  defm it_can_substitute_into_only_star_pattern
    f = new FileFinder()
    pattern = new ProjectionPattern('*', {})

    expect(f.into_pattern('post', pattern)).to_equal('post')
  end

  defm it_can_substitute_into_only_filename_pattern
    f = new FileFinder()
    pattern = new ProjectionPattern('Rakefile', {})

    expect(f.into_pattern('Gruntfile', pattern)).to_equal('Gruntfile')
  end

  defm it_can_substitute_into_only_filename_pattern_with_ext
    f = new FileFinder()
    pattern = new ProjectionPattern('Rakefile.rb', {})

    expect(f.into_pattern('Gruntfile', pattern)).to_equal('Gruntfile.rb')
  end

  defm it_can_substitute_into_only_filepath_pattern
    f = new FileFinder()
    pattern = new ProjectionPattern('tasks/foo.rake', {})

    expect(f.into_pattern('min', pattern)).to_equal('tasks/min.rake')
  end

  defm it_can_substitute_into_dot_file_pattern
    f = new FileFinder()
    pattern = new ProjectionPattern('.jshintrc', {})

    expect(f.into_pattern('category', pattern)).to_equal('category')
  end
end
