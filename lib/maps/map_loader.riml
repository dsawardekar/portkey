class MapLoader
  def initialize(Callback)
    self.Callback = Callback
    self.check_conflicts = false
  end

  defm set_check_conflicts(check_conflicts)
    self.check_conflicts = check_conflicts
  end

  defm get_check_conflicts
    return self.check_conflicts
  end

  defm load(mappings)
    self.do_mapping(mappings, true)
  end

  defm unload(mappings)
    self.do_mapping(mappings, false)
  end

  defm do_mapping(mappings, do_load)
    for mapping in mappings
      map_keys = mapping.value
      projection = mapping.source
      resource_type = projection.get_resource_type()

      " Watch out for any '' mapping!
      if projection.has_mapping() && projection.get_mapping() != ''
        map_keys = projection.get_mapping()
      end

      opts = {}
      opts.buffer = true
      opts.silent = true

      map_sequence = '<LocalLeader>' . map_keys
      short_map_sequence = '<LocalLeader>' . map_keys[0]
      builder = new MapBuilder()
      builder.lhs(map_sequence)

      if do_load
        builder.mode('nnoremap')
        builder.rhs(self.get_callback_expr(resource_type))
      else
        builder.mode('nunmap')
        builder.rhs('')
      end

      builder.options(opts)
      cmd = builder.build()
      cmd = 'silent! ' . cmd

      if do_load && self.has_conflict(map_keys, false)
        echo_warn("Portkey: Mapping for #{resource_type} #{map_sequence} conflicts with #{short_map_sequence}")
      end

      "echo_msg('"' .cmd . '"')
      execute(cmd)
    end
  end

  defm print(mappings)
    i = 0
    for mapping in mappings
      map_keys = mapping.value
      projection = mapping.source
      resource_type = projection.get_resource_type()

      if projection.has_mapping() && projection.get_mapping() != ''
        map_keys = projection.get_mapping()
      end

      opts = {}
      opts.buffer = true
      opts.silent = true

      map_sequence = g:maplocalleader . map_keys
      short_map_sequence = g:maplocalleader . map_keys[0]
      line  = map_sequence
      line .= repeat(' ', 10 - len(map_sequence))
      line .= resource_type
      line .= repeat(' ', 15 - len(resource_type))

      if self.has_conflict(map_keys, true)
        line .= " (Conflicts with #{short_map_sequence})"
      end

      echo_msg(line)
      i += 1
    end

    if i == 0
      echo_warn('Portkey: No Mappings Found.')
    end
  end

  defm get_callback_expr(arg)
    callback_name = get_delegate_name(self.Callback)
    return ":call #{callback_name}('#{arg}')<CR>"
  end

  defm has_conflict(keys, force)
    if !(self.check_conflicts || force)
      return false
    end

    map_sequence = '<LocalLeader>' . keys
    short_map_sequence = '<LocalLeader>'. keys[0]
    map_rhs = maparg(short_map_sequence)

    if map_rhs =~ 'Delegate'
      return false
    else
      return map_rhs != ''
    end
  end

end
